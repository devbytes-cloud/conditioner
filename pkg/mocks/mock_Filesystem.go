// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	fs "io/fs"

	mock "github.com/stretchr/testify/mock"
)

// MockFilesystem is an autogenerated mock type for the Filesystem type
type MockFilesystem struct {
	mock.Mock
}

type MockFilesystem_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFilesystem) EXPECT() *MockFilesystem_Expecter {
	return &MockFilesystem_Expecter{mock: &_m.Mock}
}

// ReadFile provides a mock function with given fields: name
func (_m *MockFilesystem) ReadFile(name string) ([]byte, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for ReadFile")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFilesystem_ReadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFile'
type MockFilesystem_ReadFile_Call struct {
	*mock.Call
}

// ReadFile is a helper method to define mock.On call
//   - name string
func (_e *MockFilesystem_Expecter) ReadFile(name interface{}) *MockFilesystem_ReadFile_Call {
	return &MockFilesystem_ReadFile_Call{Call: _e.mock.On("ReadFile", name)}
}

func (_c *MockFilesystem_ReadFile_Call) Run(run func(name string)) *MockFilesystem_ReadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFilesystem_ReadFile_Call) Return(_a0 []byte, _a1 error) *MockFilesystem_ReadFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFilesystem_ReadFile_Call) RunAndReturn(run func(string) ([]byte, error)) *MockFilesystem_ReadFile_Call {
	_c.Call.Return(run)
	return _c
}

// Stat provides a mock function with given fields: name
func (_m *MockFilesystem) Stat(name string) (fs.FileInfo, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Stat")
	}

	var r0 fs.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (fs.FileInfo, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) fs.FileInfo); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fs.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFilesystem_Stat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stat'
type MockFilesystem_Stat_Call struct {
	*mock.Call
}

// Stat is a helper method to define mock.On call
//   - name string
func (_e *MockFilesystem_Expecter) Stat(name interface{}) *MockFilesystem_Stat_Call {
	return &MockFilesystem_Stat_Call{Call: _e.mock.On("Stat", name)}
}

func (_c *MockFilesystem_Stat_Call) Run(run func(name string)) *MockFilesystem_Stat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFilesystem_Stat_Call) Return(_a0 fs.FileInfo, _a1 error) *MockFilesystem_Stat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFilesystem_Stat_Call) RunAndReturn(run func(string) (fs.FileInfo, error)) *MockFilesystem_Stat_Call {
	_c.Call.Return(run)
	return _c
}

// WriteFile provides a mock function with given fields: name, data, perm
func (_m *MockFilesystem) WriteFile(name string, data []byte, perm fs.FileMode) error {
	ret := _m.Called(name, data, perm)

	if len(ret) == 0 {
		panic("no return value specified for WriteFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte, fs.FileMode) error); ok {
		r0 = rf(name, data, perm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFilesystem_WriteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteFile'
type MockFilesystem_WriteFile_Call struct {
	*mock.Call
}

// WriteFile is a helper method to define mock.On call
//   - name string
//   - data []byte
//   - perm fs.FileMode
func (_e *MockFilesystem_Expecter) WriteFile(name interface{}, data interface{}, perm interface{}) *MockFilesystem_WriteFile_Call {
	return &MockFilesystem_WriteFile_Call{Call: _e.mock.On("WriteFile", name, data, perm)}
}

func (_c *MockFilesystem_WriteFile_Call) Run(run func(name string, data []byte, perm fs.FileMode)) *MockFilesystem_WriteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte), args[2].(fs.FileMode))
	})
	return _c
}

func (_c *MockFilesystem_WriteFile_Call) Return(_a0 error) *MockFilesystem_WriteFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFilesystem_WriteFile_Call) RunAndReturn(run func(string, []byte, fs.FileMode) error) *MockFilesystem_WriteFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFilesystem creates a new instance of MockFilesystem. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFilesystem(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFilesystem {
	mock := &MockFilesystem{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
